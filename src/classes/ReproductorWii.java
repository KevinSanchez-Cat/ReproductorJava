/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package classes;

import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author HP
 */
public class ReproductorWii extends javax.swing.JFrame
{

    Music hiloMusica = new Music();
    HilosDeBarra hiloBarra = new HilosDeBarra();
    Hilo hiloDuracion = new Hilo(1);//hilo tiempo o duracion

    int porcent, aux;//guarda el percentaje | guarda el tiempo donde se quedo la cancion
    double dura;//guarda lo que dura la cancion en segundos
    double espera;//guarda lo que dura cada porcentaje de la barra en milisegundos para que termine al mismo tiempo q la cancion
    int contador, contador2, contador3, contador4;//guardan minutos/segundos

    ArrayList<Object> listaArchivos = new ArrayList<>();//guarda archivos para optener su nombre y duracion despues
    DefaultListModel lista = new DefaultListModel();

    /**
     * Creates new form ReproductorWii
     */
    public ReproductorWii()
    {
        initComponents();
        Image icono = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("imagenes/iconoReproductor.png"));
        setIconImage(icono);
        jlistaReproduccion.setModel(lista);
        setLocationRelativeTo(null);
        setTitle("Reproductor MP3");
        setResizable(false);

        //Muestra los botones que se pueden utilizar
        botonAnteriorPista.setEnabled(false);
        botonAñadirPista.setEnabled(false);
        botonEliminarLista.setEnabled(false);
        botonSiguientePista.setEnabled(false);
        botonStop.setEnabled(false);
        botonPausarPista.setEnabled(false);
        botonPlay.setEnabled(false);
        botonReanuarPista.setEnabled(false);

        jlistaReproduccion.setCellRenderer(new listaC());
        try
        {
            k.start();
        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
        }
        panelMenu.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panelContenedor = new javax.swing.JPanel();
        botonReanuarPista = new javax.swing.JButton();
        botonAgregarLista = new javax.swing.JButton();
        botonAñadirPista = new javax.swing.JButton();
        botonAnteriorPista = new javax.swing.JButton();
        botonPausarPista = new javax.swing.JButton();
        botonSiguientePista = new javax.swing.JButton();
        botonStop = new javax.swing.JButton();
        botonEliminarLista = new javax.swing.JButton();
        botonPlay = new javax.swing.JButton();
        panelMenu = new javax.swing.JPanel();
        txtBuscaCancion = new rojeru_san.RSMTextFull();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlistaReproduccion = new javax.swing.JList<>();
        botonLista = new javax.swing.JButton();
        imagen = new javax.swing.JLabel();
        etiquetaDuracion = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        etiquetaNombre = new javax.swing.JLabel();
        barraProgreso = new org.edisoncor.gui.progressBar.ProgressBarRound();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelContenedor.setBackground(new java.awt.Color(0, 0, 0));
        panelContenedor.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        botonReanuarPista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48/2001879 - begin blue continue go play shadow start.png"))); // NOI18N
        botonReanuarPista.setBorder(null);
        botonReanuarPista.setContentAreaFilled(false);
        botonReanuarPista.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                botonReanuarPistaActionPerformed(evt);
            }
        });
        panelContenedor.add(botonReanuarPista, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 410, 50, 50));

        botonAgregarLista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48/2001884 - blue menu playlist settings shadow.png"))); // NOI18N
        botonAgregarLista.setBorder(null);
        botonAgregarLista.setContentAreaFilled(false);
        botonAgregarLista.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                botonAgregarListaActionPerformed(evt);
            }
        });
        panelContenedor.add(botonAgregarLista, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 50, 50));

        botonAñadirPista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48/2001887 - add blue increase plus shadow.png"))); // NOI18N
        botonAñadirPista.setBorder(null);
        botonAñadirPista.setContentAreaFilled(false);
        botonAñadirPista.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                botonAñadirPistaActionPerformed(evt);
            }
        });
        panelContenedor.add(botonAñadirPista, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 410, 50, 50));

        botonAnteriorPista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48/2001868 - backward blue decrease previous rewind shadow skip.png"))); // NOI18N
        botonAnteriorPista.setBorder(null);
        botonAnteriorPista.setContentAreaFilled(false);
        botonAnteriorPista.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                botonAnteriorPistaActionPerformed(evt);
            }
        });
        panelContenedor.add(botonAnteriorPista, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 410, 50, 50));

        botonPausarPista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48/2001889 - blue end pause shadow stop wait.png"))); // NOI18N
        botonPausarPista.setBorder(null);
        botonPausarPista.setContentAreaFilled(false);
        botonPausarPista.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                botonPausarPistaActionPerformed(evt);
            }
        });
        panelContenedor.add(botonPausarPista, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 410, 50, 50));

        botonSiguientePista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48/2001880 - begin continue forward navigate next shadow skip.png"))); // NOI18N
        botonSiguientePista.setBorder(null);
        botonSiguientePista.setContentAreaFilled(false);
        botonSiguientePista.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                botonSiguientePistaActionPerformed(evt);
            }
        });
        panelContenedor.add(botonSiguientePista, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 410, 50, 50));

        botonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48/2001885 - end square stop.png"))); // NOI18N
        botonStop.setBorder(null);
        botonStop.setContentAreaFilled(false);
        botonStop.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                botonStopActionPerformed(evt);
            }
        });
        panelContenedor.add(botonStop, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 410, 50, 50));

        botonEliminarLista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48/2001866 - blue close cross exit shadow x.png"))); // NOI18N
        botonEliminarLista.setBorder(null);
        botonEliminarLista.setContentAreaFilled(false);
        botonEliminarLista.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                botonEliminarListaActionPerformed(evt);
            }
        });
        panelContenedor.add(botonEliminarLista, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 410, 50, 50));

        botonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48/2001879 - begin blue continue go play shadow start.png"))); // NOI18N
        botonPlay.setBorder(null);
        botonPlay.setContentAreaFilled(false);
        botonPlay.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                botonPlayActionPerformed(evt);
            }
        });
        panelContenedor.add(botonPlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 410, 50, 50));

        panelMenu.setBackground(new java.awt.Color(51, 51, 51));
        panelMenu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtBuscaCancion.setBackground(new java.awt.Color(51, 51, 51));
        txtBuscaCancion.setForeground(new java.awt.Color(204, 204, 204));
        txtBuscaCancion.setBordeColorFocus(new java.awt.Color(255, 255, 255));
        txtBuscaCancion.setBotonColor(new java.awt.Color(51, 51, 51));
        txtBuscaCancion.setFont(new java.awt.Font("Roboto Bold", 1, 12)); // NOI18N
        txtBuscaCancion.setPlaceholder("busca una canción...");
        txtBuscaCancion.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                txtBuscaCancionKeyReleased(evt);
            }
        });
        panelMenu.add(txtBuscaCancion, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 180, 40));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/c.png"))); // NOI18N
        panelMenu.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, 40));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Lista de reproducción");
        panelMenu.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 200, 20));

        jlistaReproduccion.setBackground(new java.awt.Color(51, 51, 51));
        jlistaReproduccion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlistaReproduccion.setForeground(new java.awt.Color(0, 153, 153));
        jlistaReproduccion.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Pista 1", "Pista 2", "Pista 3", "Pista 4", "Pista 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jlistaReproduccion.setSelectionBackground(new java.awt.Color(0, 153, 153));
        jlistaReproduccion.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jlistaReproduccionMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jlistaReproduccion);

        panelMenu.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 220, 180));

        panelContenedor.add(panelMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 240, 280));

        botonLista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48/2001881 - blue details more settings shadow.png"))); // NOI18N
        botonLista.setBorder(null);
        botonLista.setContentAreaFilled(false);
        botonLista.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                botonListaActionPerformed(evt);
            }
        });
        panelContenedor.add(botonLista, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 410, 50, 50));

        imagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/gota.gif"))); // NOI18N
        panelContenedor.add(imagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 780, 280));

        etiquetaDuracion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        etiquetaDuracion.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaDuracion.setText("00:00");
        panelContenedor.add(etiquetaDuracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 380, 50, 20));

        jLabel7.setFont(new java.awt.Font("Cambria", 0, 48)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Wonderland-12.0");
        panelContenedor.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 410, 40));

        etiquetaNombre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        etiquetaNombre.setForeground(new java.awt.Color(255, 255, 255));
        etiquetaNombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaNombre.setText("...");
        panelContenedor.add(etiquetaNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 350, 560, 30));

        barraProgreso.setBackground(new java.awt.Color(51, 51, 51));
        barraProgreso.setForeground(new java.awt.Color(51, 204, 255));
        barraProgreso.setColorDeBorde(new java.awt.Color(255, 255, 255));
        barraProgreso.setColorDeSombra(new java.awt.Color(255, 255, 255));
        barraProgreso.setDireccionDeSombra(0);
        barraProgreso.setDistanciaDeSombra(0);
        panelContenedor.add(barraProgreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 380, 510, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelContenedor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonReanuarPistaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botonReanuarPistaActionPerformed
    {//GEN-HEADEREND:event_botonReanuarPistaActionPerformed
        if (!listaArchivos.isEmpty())
        {

            hiloMusica.Continuar(); //reanuda el hilo musica

            hiloDuracion = new Hilo(contador, contador2, contador3, contador4, (int) dura, aux); //crea nuevos objetos de hilos con los valores en los que se encontraban al momento de la pausa
            hiloBarra = new HilosDeBarra((int) espera, (int) dura, porcent);

            hiloDuracion.recibeJLabel(etiquetaDuracion);
            hiloBarra.recibirBarraDeProgreso(barraProgreso, imagen);

            hiloBarra.start(); //inicio de la continuacion de los hilos (play)
            hiloDuracion.start();

            botonPlay.setVisible(false);
            botonReanuarPista.setVisible(false);
            botonPausarPista.setVisible(true);
            botonStop.setVisible(true);
        }
    }//GEN-LAST:event_botonReanuarPistaActionPerformed

    private void botonAgregarListaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botonAgregarListaActionPerformed
    {//GEN-HEADEREND:event_botonAgregarListaActionPerformed

        try
        {
            JFileChooser selecciona = new JFileChooser();  //crea objeto file chooser
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo MP3", "mp3", "mp3");  //solo muestra archivos .mp3 en file chocer
            selecciona.setFileFilter(filtro);  //se agrega el filtro al file chooser
            selecciona.showOpenDialog(this);   //sin esto me marcaba error :v
            File archivo = selecciona.getSelectedFile(); //obtiene el archivo en la variable archivo
            String ruta = ""; //borra la ruta para evitar que se quede una anterior

            if (archivo != null) // si no se selecciono ningun archivo no hace nada
            {
                listaArchivos.clear(); //lo mismo pero para la lista de archivos
                listaArchivos.add(archivo); //agrega el archivo al array
                ruta = archivo.getCanonicalPath(); //obtiene la ruta del archivo

                hiloMusica.Stop(); //para el hilo anterior en caso de existir
                hiloMusica.AbrirFichero(ruta); //manda la ubicacion del archivo al hilo musica
                hiloMusica.Play(); //reproduce el archivo

                etiquetaNombre.setText(archivo.getName());//obtiene el nombre del archivo/cancion

                dura = ManipulaReproducctor.calcularDuracion(archivo); //llama al metodo para calcular tiempo en segundos

                //comprueba si el hilo tiempo e hilo barra estan activos
                if (hiloDuracion.isAlive())
                {  //para ambos hilos
                    hiloDuracion.stop();
                }
                if (hiloBarra.isAlive())
                {

                    hiloBarra.stop();
                }
                barra();

                botonAnteriorPista.setEnabled(true);
                botonAñadirPista.setEnabled(true);
                botonEliminarLista.setEnabled(true);
                botonSiguientePista.setEnabled(true);
                botonStop.setEnabled(true);
                botonPausarPista.setEnabled(true);
                botonPlay.setEnabled(true);
                botonReanuarPista.setEnabled(true);
                ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);
                ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
                botonPlay.setVisible(false);
                botonReanuarPista.setVisible(false);
                botonPausarPista.setVisible(true);

            }

        } catch (HeadlessException | IOException e)
        {
            JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonAgregarListaActionPerformed

    private void botonAñadirPistaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botonAñadirPistaActionPerformed
    {//GEN-HEADEREND:event_botonAñadirPistaActionPerformed
        if (!listaArchivos.isEmpty())
        {
            try
            {

                JFileChooser selecciona = new JFileChooser(); //creacion del file chooser
                FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo MP3", "mp3", "mp3"); //filtrado de archivos .mp3
                selecciona.setFileFilter(filtro);//agregar filtro a file chooser
                selecciona.showOpenDialog(this);
                File archivo = selecciona.getSelectedFile(); //guarda el archivo actual en variable archivo

                if (archivo != null)
                {
                    listaArchivos.add(archivo); //añade el archivo a la lista
                }

                ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);
                ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
            } catch (HeadlessException e)
            {
                JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonAñadirPistaActionPerformed

    private void botonAnteriorPistaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botonAnteriorPistaActionPerformed
    {//GEN-HEADEREND:event_botonAnteriorPistaActionPerformed
        if (!listaArchivos.isEmpty())
        {
            try
            {

                int indice = 0;
                String nombre = etiquetaNombre.getText();

                for (int i = 0; i < listaArchivos.size(); i++)
                {
                    File archivo = (File) listaArchivos.get(i);
                    if (nombre.equals(archivo.getName()))
                    {
                        indice = i;
                        break;
                    }
                }

                if ((indice - 1) == -1)
                {
                    indice = listaArchivos.size() - 1;
                } else
                {
                    indice--;
                }

                File archivo = (File) listaArchivos.get(indice);

                String ruta = archivo.getCanonicalPath();

                hiloMusica.Stop();
                hiloMusica.AbrirFichero(ruta);
                hiloMusica.Play();
                etiquetaNombre.setText(archivo.getName());
                botonPlay.setEnabled(true);

                dura = ManipulaReproducctor.calcularDuracion(archivo);

                if (hiloDuracion.isAlive())
                {
                    hiloDuracion.stop();
                }
                if (hiloBarra.isAlive())
                {

                    hiloBarra.stop();

                }

                barra();
                ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);
                botonPlay.setVisible(false);
                botonReanuarPista.setVisible(false);
                botonPausarPista.setVisible(true);
                ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
            } catch (IOException e)
            {
                JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonAnteriorPistaActionPerformed

    private void botonPausarPistaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botonPausarPistaActionPerformed
    {//GEN-HEADEREND:event_botonPausarPistaActionPerformed
        if (!listaArchivos.isEmpty())
        {

            hiloMusica.Pausa();  //pausa hilo musica

            imagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/gota.gif"))); //cambia a imagen inicial
            contador2 = hiloDuracion.getContador2(); //guarda segundos
            contador3 = hiloDuracion.getContador3(); //guarda minutos
            aux = hiloDuracion.getAux();                  //guarda la duracion de la cancion actual
            porcent = hiloBarra.getPorcent();         //guarda el porcentaje de la barra

            hiloBarra.stop();                         //para los tres hilos restantes
            hiloDuracion.stop();

            botonPlay.setVisible(false);
            botonReanuarPista.setVisible(true);
            botonPausarPista.setVisible(false);
            botonStop.setVisible(true);
        }
    }//GEN-LAST:event_botonPausarPistaActionPerformed

    private void botonSiguientePistaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botonSiguientePistaActionPerformed
    {//GEN-HEADEREND:event_botonSiguientePistaActionPerformed
        if (!listaArchivos.isEmpty())
        {
            try
            {
                int indice = 0;
                String nombre = etiquetaNombre.getText();

                for (int i = 0; i < listaArchivos.size(); i++)
                {
                    File archivo = (File) listaArchivos.get(i);
                    if (nombre.equals(archivo.getName()))
                    {
                        indice = i;
                        break;
                    }
                }
                if ((indice + 1) == listaArchivos.size())
                {
                    indice = 0;
                } else
                {
                    indice++;
                }
                File archivo = (File) listaArchivos.get(indice);

                String ruta = archivo.getCanonicalPath();

                hiloMusica.Stop();
                hiloMusica.AbrirFichero(ruta);
                hiloMusica.Play();
                etiquetaNombre.setText(archivo.getName());
                botonPlay.setEnabled(true);

                dura = ManipulaReproducctor.calcularDuracion(archivo);

                if (hiloDuracion.isAlive())
                {
                    hiloDuracion.stop();
                }
                if (hiloBarra.isAlive())
                {

                    hiloBarra.stop();
                }

                barra();
                ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);
                ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
                botonPlay.setVisible(false);
                botonReanuarPista.setVisible(false);
                botonPausarPista.setVisible(true);

            } catch (IOException e)
            {
                JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonSiguientePistaActionPerformed

    private void botonStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botonStopActionPerformed
    {//GEN-HEADEREND:event_botonStopActionPerformed
        if (!listaArchivos.isEmpty())
        {
            imagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/gota.gif")));
            barraProgreso.setValue(0);
            etiquetaDuracion.setText("00:00");

            hiloMusica.Stop();

            if (hiloDuracion.isAlive())
            {
                hiloDuracion.stop();
            }
            if (hiloBarra.isAlive())
            {

                hiloBarra.stop();
            }

            ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);
            ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
            botonPlay.setVisible(true);
            botonReanuarPista.setVisible(false);
            botonPausarPista.setVisible(false);
            botonStop.setEnabled(false);
        }
    }//GEN-LAST:event_botonStopActionPerformed

    private void botonEliminarListaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botonEliminarListaActionPerformed
    {//GEN-HEADEREND:event_botonEliminarListaActionPerformed
        if (!listaArchivos.isEmpty())
        {
            try
            {

                listaArchivos.clear(); //lo mismo pero para la lista de archivos
                imagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/gota.gif")));
                etiquetaNombre.setText("...");
                barraProgreso.setValue(0);
                etiquetaDuracion.setText("00:00");

                hiloMusica.Stop();

                if (hiloDuracion.isAlive())
                {
                    hiloDuracion.stop();
                }
                if (hiloBarra.isAlive())
                {

                    hiloBarra.stop();
                }

                ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);

                //
                botonPausarPista.setVisible(false);
                botonReanuarPista.setVisible(false);
                botonPlay.setVisible(true);
                //Muestra los botones que se pueden utilizar

                botonAnteriorPista.setEnabled(false);
                botonAñadirPista.setEnabled(false);
                botonEliminarLista.setEnabled(false);
                botonSiguientePista.setEnabled(false);
                botonStop.setEnabled(false);
                botonPausarPista.setEnabled(false);
                botonPlay.setEnabled(false);
                botonReanuarPista.setEnabled(false);

            } catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonEliminarListaActionPerformed

    private void botonPlayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botonPlayActionPerformed
    {//GEN-HEADEREND:event_botonPlayActionPerformed
        if (!listaArchivos.isEmpty())
        {
            try
            {

                int indice = 0;
                String nombre = etiquetaNombre.getText();

                for (int i = 0; i < listaArchivos.size(); i++)
                {
                    File archivo = (File) listaArchivos.get(i);
                    if (nombre.equals(archivo.getName()))
                    {
                        indice = i;
                        break;
                    }
                }

                File archivo = (File) listaArchivos.get(indice);

                String ruta = archivo.getCanonicalPath();

                hiloMusica.Stop();
                hiloMusica.AbrirFichero(ruta);
                hiloMusica.Play();
                etiquetaNombre.setText(archivo.getName());
                botonPlay.setEnabled(true);

                dura = ManipulaReproducctor.calcularDuracion(archivo);

                if (hiloDuracion.isAlive())
                {
                    hiloDuracion.stop();
                }
                if (hiloBarra.isAlive())
                {

                    hiloBarra.stop();
                }

                barra();
                ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);
                ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
                botonPlay.setVisible(false);
                botonReanuarPista.setVisible(false);
                botonPausarPista.setVisible(true);
                botonStop.setEnabled(true);

            } catch (IOException ex)
            {
                JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonPlayActionPerformed

    private void jlistaReproduccionMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jlistaReproduccionMouseClicked
    {//GEN-HEADEREND:event_jlistaReproduccionMouseClicked
        if (!listaArchivos.isEmpty())
        {
            int opcion;
            ImageIcon imagenMensaje=new javax.swing.ImageIcon(getClass().getResource("/imagenes/1055020 - music.png"));
            String menu[] =
            {
                "Reproducir pista", "Quitar de la lista"
            };
            opcion = JOptionPane.showOptionDialog(this, "Selecciona una opción", "Opciones ", JOptionPane.DEFAULT_OPTION
                    , JOptionPane.QUESTION_MESSAGE, imagenMensaje, menu, menu[0]);

            switch (opcion)
            {
                case 0:
                    //REPROCIR AUDIO SELECCIONADO
                    try
                    {
                        int indice = 0;
                        String nombre = "";
                        if (jlistaReproduccion.getSelectedIndex() != -1)
                        {
                            nombre = jlistaReproduccion.getSelectedValue();
                        }

                        for (int i = 0; i < listaArchivos.size(); i++)
                        {
                            File archivo = (File) listaArchivos.get(i);
                            if (nombre.equals(archivo.getName()))
                            {
                                indice = i;
                                break;
                            }
                        }

                        File archivo = (File) listaArchivos.get(indice);

                        String ruta = archivo.getCanonicalPath();

                        hiloMusica.Stop();
                        hiloMusica.AbrirFichero(ruta);
                        hiloMusica.Play();
                        etiquetaNombre.setText(archivo.getName());
                        botonPlay.setEnabled(true);

                        dura = ManipulaReproducctor.calcularDuracion(archivo);

                        if (hiloDuracion.isAlive())
                        {
                            hiloDuracion.stop();
                        }
                        if (hiloBarra.isAlive())
                        {

                            hiloBarra.stop();
                        }

                        ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
                        barra();
                        botonPlay.setVisible(false);
                        botonReanuarPista.setVisible(false);
                        botonPausarPista.setVisible(true);

                        botonStop.setEnabled(true);

                    } catch (IOException ex)
                    {
                        JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                case 1:
                    //ELIMINAR AUDIO SELECCIONADO
                    int indice = 0;
                    String nombre = "";
                    if (jlistaReproduccion.getSelectedIndex() != -1)
                    {
                        nombre = jlistaReproduccion.getSelectedValue();
                        for (int i = 0; i < listaArchivos.size(); i++)
                        {
                            File archivo = (File) listaArchivos.get(i);
                            if (nombre.equals(archivo.getName()))
                            {
                                indice = i;
                                break;
                            }
                        }

                        listaArchivos.remove(indice);
                        etiquetaNombre.setName(indice + "");
                    }
                    ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);
                    ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
                    break;
                default:
                    ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
                    break;
            }
        }
    }//GEN-LAST:event_jlistaReproduccionMouseClicked

    private void txtBuscaCancionKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtBuscaCancionKeyReleased
    {//GEN-HEADEREND:event_txtBuscaCancionKeyReleased
        if (txtBuscaCancion.getText().isEmpty())
        {
            ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);
            ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
        } else
        {
            if (!listaArchivos.isEmpty())
            {
                String cancion = txtBuscaCancion.getText();
                lista.clear();
                for (int i = 0; i < listaArchivos.size(); i++)
                {

                    File archivo = (File) listaArchivos.get(i);
                    if (archivo.getName().startsWith(cancion))
                    {
                        lista.addElement(archivo.getName());

                    }

                }
                jlistaReproduccion.setModel(lista);
                if (lista.isEmpty())
                {
                    ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);
                    ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
                }
            }
        }


    }//GEN-LAST:event_txtBuscaCancionKeyReleased

    private void botonListaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_botonListaActionPerformed
    {//GEN-HEADEREND:event_botonListaActionPerformed
        if (panelMenu.isVisible())
        {
            panelMenu.setVisible(false);
        } else
        {
            panelMenu.setVisible(true);
        }


    }//GEN-LAST:event_botonListaActionPerformed
    Thread k = new Thread()
    {
        @Override
        public void run()
        {
            while (true)
            {
                try
                {
                    if (barraProgreso.getValue() == 100)
                    {

                        botonSiguientePistaActionPerformed(null);
                    }
                    String cancion = etiquetaNombre.getText();
                    boolean c = false;
                    for (int i = 0; i < listaArchivos.size(); i++)
                    {
                        File archivo = (File) listaArchivos.get(i);
                        if (archivo.getName().equals(cancion))
                        {
                            c = true;
                        }
                    }
                    if (c == false && (barraProgreso.getValue() > 0))
                    {
                        if (listaArchivos.isEmpty())
                        {

                        } else
                        {
                            siguente();
                        }
                    }

                    if (listaArchivos.isEmpty() && (barraProgreso.getValue() > 0))
                    {
                        JOptionPane.showMessageDialog(null, "La pista de Audio no existe", "Mensaje de error", JOptionPane.WARNING_MESSAGE);

                        imagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/gota.gif")));
                        etiquetaNombre.setText("...");
                        barraProgreso.setValue(0);
                        etiquetaDuracion.setText("00:00");

                        hiloMusica.Stop();

                        if (hiloDuracion.isAlive())
                        {
                            hiloDuracion.stop();
                        }
                        if (hiloBarra.isAlive())
                        {

                            hiloBarra.stop();
                        }

                        ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);

                        //
                        botonPausarPista.setVisible(false);
                        botonReanuarPista.setVisible(false);
                        botonPlay.setVisible(true);
//Muestra los botones que se pueden utilizar

                        botonAnteriorPista.setEnabled(false);
                        botonAñadirPista.setEnabled(false);
                        botonEliminarLista.setEnabled(false);
                        botonSiguientePista.setEnabled(false);
                        botonStop.setEnabled(false);
                        botonPausarPista.setEnabled(false);
                        botonPlay.setEnabled(false);
                        botonReanuarPista.setEnabled(false);
                    }

                    sleep(1000);

                } catch (InterruptedException ex)
                {
                    JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    };

    public void barra()
    {
        try
        {

            espera = ((1 * dura) / 100) * 1000; //calcula la espera entre el porcentaje de la barra para que dure lo mismo que el hilo tiempo de musica
            contador = contador2 = contador3 = contador4 = 0;
            porcent = 0;
            hiloDuracion = new Hilo(contador, contador2, contador3, contador4, (int) dura, aux); //crea nuevos objetos de hilos con los valores en los que se encontraban al momento de la pausa
            hiloDuracion.recibeJLabel(etiquetaDuracion);

            hiloBarra = new HilosDeBarra((int) espera, (int) dura, porcent);
            hiloBarra.recibirBarraDeProgreso(barraProgreso, imagen);

            hiloBarra.start();
            hiloDuracion.start();

        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void siguente()
    {
        if (!listaArchivos.isEmpty())
        {
            try
            {
                int indice = Integer.parseInt(etiquetaNombre.getName());
                
                if ((indice) == listaArchivos.size())
                {
                    indice = 0;
                }
                File archivo = (File) listaArchivos.get(indice);

                String ruta = archivo.getCanonicalPath();

                hiloMusica.Stop();
                hiloMusica.AbrirFichero(ruta);
                hiloMusica.Play();
                etiquetaNombre.setText(archivo.getName());
                botonPlay.setEnabled(true);

                dura = ManipulaReproducctor.calcularDuracion(archivo);

                if (hiloDuracion.isAlive())
                {
                    hiloDuracion.stop();
                }
                if (hiloBarra.isAlive())
                {

                    hiloBarra.stop();
                }

                barra();
                ManipulaReproducctor.listaReproduccion(lista, listaArchivos, jlistaReproduccion);
                ManipulaReproducctor.seleccionaLista(etiquetaNombre, listaArchivos, jlistaReproduccion);
                botonPlay.setVisible(false);
                botonReanuarPista.setVisible(false);
                botonPausarPista.setVisible(true);

            } catch (IOException e)
            {
                JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        try
        {
            UIManager.setLookAndFeel("com.jtattoo.plaf.acryl.AcrylLookAndFeel");
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e)
        {
            JOptionPane.showMessageDialog(null, "ERROR ", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ReproductorWii().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.progressBar.ProgressBarRound barraProgreso;
    private javax.swing.JButton botonAgregarLista;
    private javax.swing.JButton botonAnteriorPista;
    private javax.swing.JButton botonAñadirPista;
    private javax.swing.JButton botonEliminarLista;
    private javax.swing.JButton botonLista;
    private javax.swing.JButton botonPausarPista;
    private javax.swing.JButton botonPlay;
    private javax.swing.JButton botonReanuarPista;
    private javax.swing.JButton botonSiguientePista;
    private javax.swing.JButton botonStop;
    private javax.swing.JLabel etiquetaDuracion;
    private javax.swing.JLabel etiquetaNombre;
    private javax.swing.JLabel imagen;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> jlistaReproduccion;
    private javax.swing.JPanel panelContenedor;
    private javax.swing.JPanel panelMenu;
    private rojeru_san.RSMTextFull txtBuscaCancion;
    // End of variables declaration//GEN-END:variables
}
